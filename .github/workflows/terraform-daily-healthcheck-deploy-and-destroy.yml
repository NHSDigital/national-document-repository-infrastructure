name: 'Daily Healthcheck Deploy and Destroy'

#on:
#  schedule:
#    - cron: 30 4 * * 1-5
on:
  workflow_dispatch:
    inputs:
      buildBranch:
        description: 'Feature branch to push to sandbox.'
        required: true
        type: 'string'
      sandboxWorkspace:
        description: 'Which Sandbox to push to.'
        required: true
        type: 'string'
      environment:
        default: 'development'
        description: 'Which environment should this run against'
        required: true
        type: 'string'

env:
  ENVIRONMENT: development
  SANDBOX: ndrd
  BRANCH: main
  CYPRESS_BASE_URL: http://localhost:3000

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  terraform_process:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment}}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.build_branch}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}

      - name: View AWS Role
        run: aws sts get-caller-identity

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.4
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend.conf
        working-directory: ./infrastructure
        shell: bash

      - name: Terraform Set Workspace
        id: workspace
        run: terraform workspace select -or-create $SANDBOX
        working-directory: ./infrastructure
        shell: bash

        # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./infrastructure

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -var-file="${{vars.TF_VARS_FILE}}" -out tf.plan
        working-directory: ./infrastructure
        shell: bash

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tf.plan
        working-directory: ./infrastructure

  lambda_test_job:
    name: Run Lambda Unit Tests
    needs: [ terraform_process ]
    uses: nhsconnect/national-document-repository/.github/workflows/base-lambdas-reusable-test.yml@main
    with:
      python_version: "3.11"
      build_branch: ${{ github.event.inputs.build_branch}}

  react_testing_job:
    name: Run UI Unit Tests
    needs: [ terraform_process ]
    uses: nhsconnect/national-document-repository/.github/workflows/base-jest-test.yml@main
    with:
      build_branch: ${{ github.event.inputs.build_branch}}

  cypress-run-job:
    runs-on: ubuntu-22.04
    needs: [ terraform_process ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: nhsconnect/national-document-repository

      - name: Download the build folder
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./app/build

      # Npm run will run the app locally, we want to test the built application with env vars using serve
      - name: Install serve globally
        run: npm install -g serve

      - name: Cypress install
        run: |
          npm install --legacy-peer-deps
        working-directory: ./app

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          install: false
          start: serve -s build
          browser: ${{ inputs.cypress_browser}}
          working-directory: ./app
        env:
          CYPRESS_BASE_URL: ${{ inputs.cypress_base_url }}
          CYPRESS_grepTags: 'regression'

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: /home/runner/work/national-document-repository/national-document-repository/app/cypress/screenshots
          if-no-files-found: ignore
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: /home/runner/work/national-document-repository/national-document-repository/app/cypress/videos
          if-no-files-found: ignore

  #  cypress_build_job:
#    name: Build UI version for E2E Tests
#    needs: [ terraform_process ]
#    uses: nhsconnect/national-document-repository/.github/workflows/base-cypress-build.yml@main
#    with:
#      build_branch: ${{ github.event.inputs.build_branch}}
#
#  cypress_test_job:
#    name: Run Cypress E2E Tests
#    needs: [cypress_build_job]
#    uses: nhsconnect/national-document-repository/.github/workflows/base-cypress-test-all-env.yml@main
#    with:
#      cypress_base_url: $CYPRESS_BASE_URL
#      build_branch: ${{ github.event.inputs.build_branch}}

  publish_all_lambda_layers:
    name: Publish all Lambda Layers
    needs: [ terraform_process ]
    uses: nhsconnect/national-document-repository/.github/workflows/base-lambda-layer-reusable-publish-all.yml@main
    with:
      build_branch: ${{ github.event.inputs.build_branch}}
      sandbox: ${{ github.event.inputs.sandboxWorkspace}}
      environment: ${{ github.event.inputs.environment}}
      python_version: "3.11"
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_all_lambdas:
    name: Deploy all Lambdas
    uses: nhsconnect/national-document-repository/.github/workflows/base-lambdas-reusable-deploy-all.yml@main
    needs: ["publish_all_lambda_layers"]
    with:
      build_branch: ${{ github.event.inputs.build_branch}}
      sandbox: ${{ github.event.inputs.sandboxWorkspace}}
      environment: ${{ github.event.inputs.environment}}
      python_version: "3.11"
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  deploy_ui:
    name: Deploy UI
    needs: [ terraform_process ]
    uses: nhsconnect/national-document-repository/.github/workflows/base-deploy-ui.yml@main
    with:
      build_branch: ${{ github.event.inputs.build_branch}}
      environment: ${{ github.event.inputs.environment}}
      sandbox: ${{ github.event.inputs.sandboxWorkspace}}
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

#  run_full_deploy_to_sandbox:
#    name: Full Deploy of Main to Sandbox and Run Tests
#    needs: [ 'terraform_process' ]
#    uses: nhsconnect/national-document-repository/.github/workflows/full-deploy-to-sandbox.yml@main
#    with:
#      build_branch: $BRANCH
#      sandbox: $SANDBOX
#      environment: $ENVIRONMENT
#    secrets:
#      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

#  destroy_test_environment:
#    name: Destroy the Sandbox Environment from previous job
#    needs: [ 'run_full_deploy_to_sandbox' ]
#    uses: ./.github/workflows/terraform-destroy-environment-manual.yml
#    with:
#      build_branch: $BRANCH
#      environment: $ENVIRONMENT
#      sandbox_workspace: $SANDBOX
#    secrets:
#      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}