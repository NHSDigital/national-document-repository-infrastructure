name: 'Destroy (Select Account) Environment'

on:
  workflow_dispatch:
    inputs:
      build_branch:
        default: 'main'
        description: 'Feature branch to push to sandbox.'
        required: true
        type: 'string'
      sandbox_workspace:
        description: 'Which Sandbox to push destroy.'
        required: true
        type: 'string'
      cloudfront_distribution:
        description: 'Cloudfront distribution ID.'
        required: true
        type: 'string'
      terraform_vars:
        default: 'dev.tfvars'
        description: 'Which vars file is required? For test, change to test.tfvars'
        required: true
        type: 'string'
      environment:
        default: 'development'
        description: 'Which environment should this run against'
        required: true
        type: 'string'
      backend:
        default: 'backend.conf'
        description: 'Which backend configuration should be used?'
        required: true
        type: 'string'

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  cleanup_versions_process:
    name: Cleanup Versions Process
    uses: ./.github/workflows/cleanup-appconfig-and-lambda-layer-versions.yml
    with:
      build_branch: ${{ inputs.build_branch }}
      sandbox: ${{ inputs.sandbox_workspace }}
      environment: ${{ inputs.environment }}
      python_version: 3.11
    secrets:
      AWS_ASSUME_ROLE: ${{ secrets.AWS_ASSUME_ROLE }}

  terraform_destroy_process:
    name: Terraform Destroy Process
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [cleanup_versions_process]

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.build_branch}}
          repository: 'nhsconnect/national-document-repository-infrastructure'
          fetch-depth: '0'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}

      - name: View AWS Role
        run: aws sts get-caller-identity

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.4
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=${{ github.event.inputs.backend }}
        working-directory: ./infrastructure
        shell: bash

      - name: Terraform Set Workspace
        id: workspace
        run: terraform workspace select ${{ github.event.inputs.sandbox_workspace}}
        working-directory: ./infrastructure
        shell: bash

      # - name: Get CloudFront Distribution ID
      #   id: get_distribution_id
      #   run: |
      #     DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='your-comment'].Id" --output text)
      #     echo "Distribution ID: $DISTRIBUTION_ID"
      #     echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

      # Install dependencies for Python scripts
      - name: Install Python and Dependencies
        run: |
          python3 -m venv ./venv
          ./venv/bin/pip3 install --upgrade pip
          ./venv/bin/pip3 install boto3==1.33.11

      # Run script to remove Lambda@Edge associations
      - name: Remove Lambda@Edge Associations
        env:
          DISTRIBUTION_ID: ${{ inputs.cloudfront_distribution }}
        run: ./venv/bin/python3 scripts/remove_edge_associations.py ${{ inputs.sandbox }}

      # Run script to delete Lambda function across regions
      - name: Delete Lambda@Edge Replications
        env:
          WORKSPACE: ${{ inputs.sandbox_workspace }}
        run: ./venv/bin/python3 scripts/remove_edge_replications.py ${{ inputs.sandbox }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var-file="${{ github.event.inputs.terraform_vars }}"
        working-directory: ./infrastructure
