# .github/workflows/terraform-dev
name: "Deploy Feature Branch to Sandbox"

on:
  workflow_dispatch:
    inputs:
      build_branch:
        description: "Feature branch to push to a workspace."
        required: true
        type: "string"
      workspace:
        description: "Which Terraform workspace to push to."
        required: true
        type: "string"
      environment:
        default: "development"
        description: "Which environment should this run against"
        required: true
        type: "string"

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  terraform_process:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.build_branch}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: true

      - name: View AWS Role
        run: aws sts get-caller-identity

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.4
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend.conf
        working-directory: ./infrastructure
        shell: bash

      - name: Terraform Set Workspace
        id: workspace
        run: terraform workspace select -or-create ${{ github.event.inputs.workspace}}
        working-directory: ./infrastructure
        shell: bash

        # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./infrastructure

      # TODO : Temporary steps to update existing log groups with KMS, to remove after next deployment to production
      - name: Set up Python ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Terraform KMS log group update
        id: log-update
        run: |
          python3 scripts/import_existing_lambda_log_groups.py ${{ inputs.workspace }} ${{ inputs.environment }}

      - name: Terraform Authoriser SSM update
        id: authoriser-ssm-update
        run: |
          python3 scripts/import_existing_ssm_iam_policy.py ${{ inputs.workspace }} ${{ inputs.environment }}
      # TODO : End
      - name: Terraform Plan
        id: plan
        run: |
          pip install boto3
          terraform plan -input=false -no-color -var-file="${{ vars.TF_VARS_FILE }}" -out=tf.plan
        working-directory: ./infrastructure
        shell: bash

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tf.plan
        working-directory: ./infrastructure
