# .github/workflows/terraform-dev
name: 'Deploy Feature Branch to Sandbox'

on:
  workflow_dispatch:
    inputs:
      buildBranch:
        description: 'Feature branch to push to sandbox.'
        required: true
        type: 'string'
      sandboxWorkspace:
        description: 'Which Sandbox to push to.'
        required: true
        type: 'string'
      environment:
        default: 'development'
        description: 'Which environment should this run against'
        required: true
        type: 'string'

permissions:
  pull-requests: write
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  terraform_process:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.buildBranch}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: true

      - name: View AWS Role
        run: aws sts get-caller-identity

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend.conf
        working-directory: ./infrastructure
        shell: bash

      - name: Terraform Set Workspace
        id: workspace
        run: terraform workspace select -or-create ${{ github.event.inputs.sandboxWorkspace}}
        working-directory: ./infrastructure
        shell: bash

        # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./infrastructure

      - name: Terraform Plan
        id: plan
        run: |
          # Run Terraform plan and save binary output
          terraform plan -input=false -no-color -var-file="${{vars.TF_VARS_FILE}}" -out tf.plan
      
          # Convert binary plan to readable format
          terraform show -no-color tf.plan > tfplan.txt
      
          # Mask PEM certificates (BEGIN...END CERTIFICATE blocks)
          awk 'BEGIN{cert=""} 
            /-----BEGIN CERTIFICATE-----/{cert=$0; in_cert=1; next} 
            /-----END CERTIFICATE-----/{cert=cert"\n"$0; print cert; cert=""; in_cert=0; next} 
            in_cert{cert=cert"\n"$0}' tfplan.txt | while IFS= read -r cert_block; do
              if [ -n "$cert_block" ]; then
                echo "::add-mask::$cert_block"
              fi
          done || echo "No certificate blocks found to mask."
      
          # Output sanitized plan to console logs
          cat tfplan.txt
      
          # Summary line for GitHub job output
          echo "summary=$(grep -E 'Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy\.|No changes\. Your infrastructure matches the configuration\.' tfplan.txt | sed 's/.*No changes\. Your infrastructure matches the configuration/Plan: no changes/g' | sed 's/.*Plan: //g' | sed 's/\..*//g')" >> $GITHUB_OUTPUT
        working-directory: ./infrastructure
        shell: bash

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tf.plan
        working-directory: ./infrastructure
